/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 */

// Check for jQuery dependency
if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap's JavaScript requires jQuery");
}

// Transition End Emulation
(function ($) {
    "use strict";

    var transitionEnd = function () {
        var el = document.createElement("bootstrap");
        var transitions = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transitions) {
            if (el.style[name] !== undefined) {
                return { end: transitions[name] };
            }
        }
        return false;
    };

    $.fn.emulateTransitionEnd = function (duration) {
        var called = false;
        var $el = this;
        $(this).one("bsTransitionEnd", function () {
            called = true;
        });
        var callback = function () {
            if (!called) {
                $el.trigger($.support.transition.end);
            }
        };
        setTimeout(callback, duration);
        return this;
    };

    $(function () {
        $.support.transition = transitionEnd();
        if ($.support.transition) {
            $.event.special.bsTransitionEnd = {
                bindType: $.support.transition.end,
                delegateType: $.support.transition.end,
                handle: function (event) {
                    if ($(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                }
            };
        }
    });
})(jQuery);

// Alert Component
(function ($) {
    "use strict";

    var dismissibleAlert = '[data-dismiss="alert"]';

    var Alert = function (element) {
        $(element).on("click", dismissibleAlert, this.close);
    };

    Alert.VERSION = "3.3.7";
    Alert.TRANSITION_DURATION = 150;

    Alert.prototype.close = function (event) {
        var $this = $(this);
        var target = $this.attr("data-target") || $this.attr("href");
        var $target = $(target);

        if (event) {
            event.preventDefault();
        }

        if (!$target.length) {
            $target = $this.closest(".alert");
        }

        $target.trigger(event = $.Event("close.bs.alert"));
        if (event.isDefaultPrevented()) {
            return;
        }

        $target.removeClass("in");
        if ($.support.transition && $target.hasClass("fade")) {
            $target.one("bsTransitionEnd", function () {
                $target.trigger("closed.bs.alert").remove();
            }).emulateTransitionEnd(Alert.TRANSITION_DURATION);
        } else {
            $target.trigger("closed.bs.alert").remove();
        }
    };

    var old = $.fn.alert;
    $.fn.alert = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) {
                $this.data("bs.alert", (data = new Alert(this)));
            }
            if (typeof option === "string") {
                data[option].call($this);
            }
        });
    };

    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function () {
        $.fn.alert = old;
        return this;
    };

    $(document).on("click.bs.alert.data-api", dismissibleAlert, Alert.prototype.close);
})(jQuery);

// Button Component
(function ($) {
    "use strict";

    var Button = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    };

    Button.VERSION = "3.3.7";
    Button.DEFAULTS = {
        loadingText: "loading..."
    };

    Button.prototype.setState = function (state) {
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();

        state += "Text";
        if (data.resetText == null) {
            $el.data("resetText", $el[val]());
        }

        setTimeout($.proxy(function () {
            $el[val](data[state] == null ? this.options[state] : data[state]);
            if (state === "loadingText") {
                this.isLoading = true;
                $el.addClass("disabled").attr("disabled", "disabled");
            } else {
                this.isLoading = false;
                $el.removeClass("disabled").removeAttr("disabled");
            }
        }, this), 0);
    };

    Button.prototype.toggle = function () {
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") === "radio") {
                if ($input.prop("checked")) {
                    return;
                }
                $parent.find(".active").removeClass("active");
                this.$element.addClass("active");
            } else if ($input.prop("type") === "checkbox") {
                this.$element.toggleClass("active");
            }
            $input.prop("checked", this.$element.hasClass("active"));
            $input.trigger("change");
        } else {
            this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
            this.$element.toggleClass("active");
        }
    };

    var old = $.fn.button;
    $.fn.button = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.button");
            if (!data) {
                $this.data("bs.button", (data = new Button(this, option)));
            }
            if (typeof option === "string") {
                data[option]();
            }
        });
    };

    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function () {
        $.fn.button = old;
        return this;
    };

    $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (e) {
        var $btn = $(e.target).closest(".btn");
        $.fn.button.call($btn, "toggle");
        if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
            e.preventDefault();
            $btn.is("input,button") ? $btn.trigger("focus") : $btn.find("input:visible,button:visible").first().trigger("focus");
        }
    }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (e) {
        $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type));
    });
})(jQuery);

// Carousel Component
(function ($) {
    "use strict";

    var Carousel = function (element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = null;
        this.sliding = null;
        this.interval = null;
        this.$active = null;
        this.$items = null;

        if (this.options.keyboard) {
            this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));
        }

        if (this.options.pause === "hover") {
            this.$element
                .on("mouseenter.bs.carousel", $.proxy(this.pause, this))
                .on("mouseleave.bs.carousel", $.proxy(this.cycle, this));
        }
    };

    Carousel.VERSION = "3.3.7";
    Carousel.TRANSITION_DURATION = 600;
    Carousel.DEFAULTS = {
        interval: 5000,
        pause: "hover",
        wrap: true,
        keyboard: true
    };

    Carousel.prototype.keydown = function (e) {
        if (!/input|textarea/i.test(e.target.tagName)) {
            switch (e.which) {
                case 37:
                    this.prev();
                    break;
                case 39:
                    this.next();
                    break;
                default:
                    return;
            }
            e.preventDefault();
        }
    };

    Carousel.prototype.cycle = function (e) {
        if (!e) {
            this.paused = false;
        }
        if (this.interval) {
            clearInterval(this.interval);
        }
        if (this.options.interval && !this.paused) {
            this.interval = setInterval($.proxy(this.next, this), this.options.interval);
        }
        return this;
    };

    Carousel.prototype.getItemIndex = function (item) {
        this.$items = item.parent().children(".item");
        return this.$items.index(item || this.$active);
    };

    Carousel.prototype.getItemForDirection = function (direction, item) {
        var index = this.getItemIndex(item);
        var isPrev = direction === "prev" && index === 0;
        var isNext = direction === "next" && index === this.$items.length - 1;

        if (isPrev && !this.options.wrap) {
            return item;
        }
        var delta = direction === "prev" ? -1 : 1;
        var newIndex = (index + delta) % this.$items.length;
        return this.$items.eq(newIndex);
    };

    Carousel.prototype.to = function (pos) {
        var $active = this.$active = this.$element.find(".item.active");
        var index = this.getItemIndex($active);

        if (pos > this.$items.length - 1 || pos < 0) {
            return;
        }
        if (this.sliding) {
            return this.$element.one("slid.bs.carousel", function () {
                this.to(pos);
            });
        }
        if (index === pos) {
            return this.pause().cycle();
        }
        return this.slide(pos > index ? "next" : "prev", this.$items.eq(pos));
    };

    Carousel.prototype.pause = function (e) {
        if (!e) {
            this.paused = true;
        }
        if (this.$element.find(".next, .prev").length && $.support.transition) {
            this.$element.trigger($.support.transition.end);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };

    Carousel.prototype.next = function () {
        if (!this.sliding) {
            return this.slide("next");
        }
    };

    Carousel.prototype.prev = function () {
        if (!this.sliding) {
            return this.slide("prev");
        }
    };

    Carousel.prototype.slide = function (type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || this.getItemForDirection(type, $active);
        var isTransitioning = this.sliding;

        if ($next.hasClass("active")) {
            return;
        }

        var direction = type === "next" ? "left" : "right";
        this.sliding = true;

        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            var $indicator = $(this.$indicators.children()[this.getItemIndex($next)]);
            if ($indicator) {
                $indicator.addClass("active");
            }
        }

        var event = $.Event("slide.bs.carousel", {
            relatedTarget: $next[0],
            direction: direction
        });

        this.$element.trigger(event);
        if (event.isDefaultPrevented()) {
            return;
        }

        $active.addClass(direction);
        $next.addClass(type);
        $next[0].offsetWidth; // trigger reflow
        $active.addClass("active");
        $next.addClass("active");

        var complete = function () {
            $active.removeClass("active " + direction);
            $next.removeClass(type);
            this.sliding = false;
            this.$element.trigger("slid.bs.carousel", {
                relatedTarget: $next[0],
                direction: direction
            });
        };

        if ($.support.transition && this.$element.hasClass("slide")) {
            $next.one("bsTransitionEnd", complete).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
        } else {
            complete();
        }

        if (this.interval) {
            this.cycle();
        }
    };

    var old = $.fn.carousel;
    $.fn.carousel = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option === "object" && option);
            if (!data) {
                $this.data("bs.carousel", (data = new Carousel(this, options)));
            }
            if (typeof option === "number") {
                data.to(option);
            } else if (typeof option === "string") {
                data[option]();
            } else if (options.interval) {
                data.cycle();
            }
        });
    };

    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function () {
        $.fn.carousel = old;
        return this;
    };

    var clickHandler = function (e) {
        var $target = $(this);
        var href = $target.attr("data-target") || (href = $target.attr("href")) && href.replace(/.*(?=#[^\s]*$)/, "");
        var $carousel = $(href);
        if ($carousel.hasClass("carousel")) {
            var options = $.extend({}, $carousel.data(), $target.data());
            var slideTo = $target.attr("data-slide-to");
            if (slideTo) {
                options.interval = false;
            }
            $.fn.carousel.call($carousel, options);
            if (slideTo) {
                $carousel.data("bs.carousel").to(slideTo);
            }
            e.preventDefault();
        }
    };

    $(document).on("click.bs.carousel.data-api", "[data-slide]", clickHandler)
        .on("click.bs.carousel.data-api", "[data-slide-to]", clickHandler)
        .on("load", function () {
            $('[data-ride="carousel"]').each(function () {
                var $carousel = $(this);
                $.fn.carousel.call($carousel, $carousel.data());
            });
        });
})(jQuery);

// Collapse Component
(function ($) {
    "use strict";

    var Collapse = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
            '[data-toggle="collapse"][data-target="#' + element.id + '"]');
        this.transitioning = null;

        if (this.options.parent) {
            this.$parent = this.getParent();
        } else {
            this.addAriaAndCollapsedClass(this.$element, this.$trigger);
        }

        if (this.options.toggle) {
            this.toggle();
        }
    };

    Collapse.VERSION = "3.3.7";
    Collapse.TRANSITION_DURATION = 350;
    Collapse.DEFAULTS = {
        toggle: true
    };

    Collapse.prototype.dimension = function () {
        return this.$element.hasClass("width") ? "width" : "height";
    };

    Collapse.prototype.show = function () {
        if (this.transitioning || this.$element.hasClass("in")) {
            return;
        }

        var actives = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
        if (actives && actives.length) {
            var activeData = actives.data("bs.collapse");
            if (activeData && activeData.transitioning) {
                return;
            }
            Collapse.call(actives, "hide");
            activeData || actives.data("bs.collapse", null);
        }

        var event = $.Event("show.bs.collapse");
        this.$element.trigger(event);
        if (event.isDefaultPrevented()) {
            return;
        }

        this.$element[this.dimension()](0);
        this.$element.removeClass("collapse").addClass("collapsing").attr("aria-expanded", true);
        this.$trigger.removeClass("collapsed").attr("aria-expanded", true);
        this.transitioning = 1;

        var complete = function () {
            this.$element.removeClass("collapsing").addClass("collapse in")[this.dimension]("");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };

        if (!$.support.transition) {
            return complete.call(this);
        }

        this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
    };

    Collapse.prototype.hide = function () {
        if (this.transitioning || !this.$element.hasClass("in")) {
            return;
        }

        var event = $.Event("hide.bs.collapse");
        this.$element.trigger(event);
        if (event.isDefaultPrevented()) {
            return;
        }

        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight; // trigger reflow
        this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", false);
        this.$trigger.addClass("collapsed").attr("aria-expanded", false);
        this.transitioning = 1;

        var complete = function () {
            this.transitioning = 0;
            this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
        };

        if (!$.support.transition) {
            return complete.call(this);
        }

        this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
    };

    Collapse.prototype.toggle = function () {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };

    Collapse.prototype.getParent = function () {
        return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
            var $el = $(element);
            this.addAriaAndCollapsedClass(this.getTarget($el), $el);
        }, this)).end();
    };

    Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
        var isOpen = $element.hasClass("in");
        $element.attr("aria-expanded", isOpen);
        $trigger.toggleClass("collapsed", !isOpen).attr("aria-expanded", isOpen);
    };

    Collapse.prototype.getTarget = function ($element) {
        var target = $element.attr("data-target") || ($element.attr("href") && $element.attr("href").replace(/.*(?=#[^\s]*$)/, ""));
        return $(target);
    };

    var old = $.fn.collapse;
    $.fn.collapse = function (option) {
        return this.each
